package com.example.choreTracker.services;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.choreTracker.models.Job;
import com.example.choreTracker.models.Job.JobStatus;
import com.example.choreTracker.models.User;
import com.example.choreTracker.repositories.JobRepository;
import com.example.choreTracker.repositories.UserRepository;

import jakarta.transaction.Transactional;

@Service
public class JobService {

    private final JobRepository jobRepository;

    public JobService(JobRepository jobRepository) {
        this.jobRepository = jobRepository;
    }

    public Job saveJob(Job job) {
        return jobRepository.save(job);
    }

    public void update(Job job) {
        jobRepository.save(job);
    }

    public Job findById(Long id) {
        return jobRepository.findById(id).orElse(null);
    }

    public void removeJobFromUser(Job job) {
        job.setAssignedTo(null);
        job.setStatus(JobStatus.AVAILABLE);  // Set status to AVAILABLE
        jobRepository.save(job);
    }

    // Find jobs assigned to a specific user
    public List<Job> findJobsByUserId(Long userId) {
        return jobRepository.findByAssignedToId(userId);
    }

    // Find available jobs (jobs that are not assigned or claimed)
    public List<Job> findAvailableJobs(Long userId) {
        // Only return jobs that are AVAILABLE and not claimed
        return jobRepository.findByStatus(JobStatus.AVAILABLE);
    }

    @Autowired
    private UserRepository userRepository;

    // Method to assign a job to a user
    public void assignJobToUser(Long jobId, Long userId) {
        // Find the job by its ID
        Job job = jobRepository.findById(jobId).orElse(null);
        if (job == null) {
            throw new IllegalArgumentException("Job not found");
        }

        // Find the user by their ID
        User user = userRepository.findById(userId).orElse(null);
        if (user == null) {
            throw new IllegalArgumentException("User not found");
        }

        // Assign the job to the user
        job.setAssignedTo(user);
        job.setStatus(JobStatus.CLAIMED);  // Set status to CLAIMED

        // Save the updated job
        jobRepository.save(job);
    }
    @Transactional
    public Job completeJob(Long jobId, Long userId) {
        try {
            // Find the job by its ID
            Job job = jobRepository.findById(jobId).orElse(null);

            if (job == null) {
                // Log an error or return a custom error message
                System.out.println("Job not found for ID: " + jobId);
                return null;
            }

            if (job.getAssignedTo() == null || !job.getAssignedTo().getId().equals(userId)) {
                // Log an error or return a custom error message
                System.out.println("User is not authorized to complete this job");
                return null;
            }

            // Mark the job as completed
            job.setCompleted(true);
            job.setStatus(JobStatus.COMPLETED);

            // Fetch the assigned user and add the job's reward to their balance
            User assignedUser = job.getAssignedTo();
            assignedUser.addToBalance(job.getReward());

            // Save the updated job and user to the database
            jobRepository.saveAndFlush(job);  // Save the job
            userRepository.saveAndFlush(assignedUser);  // Save the user

            return job; // Return the updated job
        } catch (Exception e) {
            // Log the exception and handle it accordingly
            System.out.println("An error occurred while completing the job: " + e.getMessage());
            e.printStackTrace();
            return null;
        }
    }



    public void delete(Long id) {
        // Check if the job exists in the repository
        if (jobRepository.existsById(id)) {
            jobRepository.deleteById(id);
        } else {
            throw new IllegalArgumentException("Job not found");
        }
    }
}
